#multiple linear regression from scratch
import numpy as np
class MultipleLinearRegression:
    def __init__(self):
        self.coefficients = None
        self.intercept = None

    def fit(self, X_train, y_train):
        np.insert(X_train, 0, 1, axis=1)

        #$formula:  (X^T * X)^-1 * X^T * y
        #self.coefficients = np.linalg.inv(X_train.T.dot(X_train)).dot(X_train.T).dot(y_train)
        self.coefficients = np.linalg.inv(np.dot(X_train.T, X_train)).dot(X_train.T).dot(y_train)

        self.coefficients = self.coefficients[1:]

    def predict(self, X_test):
        np.insert(X_test, 0, 1, axis=1)
        #$formula:  X * coefficients
        #return X_test.dot(self.coefficients) + self.intercept
        y_pred = np.dot(X_test, self.coefficients) + self.intercept
        return y_pred

    
    def score(self, X_test, y_test):
        #$formula:  1 - (sum((y_test - y_pred)^2) / sum((y_test - y_test.mean())^2))
        y_pred = self.predict(X_test)
        return 1 - ((y_test - y_pred) ** 2).sum() / ((y_test - y_test.mean()) ** 2).sum()


def __repr__(self):
    return "MultipleLinearRegression()"
